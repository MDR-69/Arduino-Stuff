///////////////////
// Arduino-Stuff //
///////////////////

// What's this ?
This is a general repository containing the various firmwares used for my projects.
These firmwares are not really made to be shared, so no documentation is available for them.

// List of projects concerned by these files

- Strobot:
	Strobot_LEDPanel:
		Firmware used by the LED Panels
		Receive a raw binary image over Serial USB, and convert it to 
		an electrical signal which can be understood by WS2810 LEDs
		Uses the FastLED library
		Compatible microcontrollers: Teensy 3.0 or 3.1
	Strobot_LEDStrip_RackLight:
		Firmware used by the LED strips on the corners of the racks
		Receive a command over the serial link, calculate a LED
		animation and convert it to an electrical signal which can
		be understood by WS2812B LED strips
		Uses the FastLED library
		Compatible microcontrollers: Arduino Nanos and clones
	Strobot_LEDStrip_Tube:
		Firmware used by the neon-like LED tubes
		Receive a command over the serial link, calculate a LED
		animation and convert it to an electrical signal which can
		be understood by WS2812B LED strips
		Uses the FastLED library
		Compatible microcontrollers: Arduino Nanos and clones
	Strobot_USBSerial_To_nRF24:
		Firmware used by Strobot (uC connected to the main computer)
		From Processing, send some commands to the custom devices over nRF24
	Strobot_nRF24_Receptor:
		Generic firmware used by all the custom devices
		Receive some commands sent over nRF24. For now, the commands are 
		simple int values, for better reliability.
		The program could be improved to send directly the data to be displayed,
		consider this on the TODO list
	Teensy_2_Serial_To_DMX:
		Simple Serial to DMX firmware
		From Processing or any other program using the Serial link,
		control DMX devices from your computer, by sending a string to the uC
		Use example - 100c355w : Set channel 100 to value 255
	MIDITranslatorRackBrice:
		Simple MIDI to MIDI interface for Teensy 2.0 (could be modified for Nanos, it'd be cheaper)
		Receive MIDI, process, and send some different MIDI back
		This is used to create an easy-to-configure patch to use in a live setting
		Use case: depending on the messages sent by a MIDI footswitch (usually one 
		message per button push), send different messages on different channels, to
		control different devices (ex: multiple racked devices, each listening on a
		different channel)